.. _annotation-detailed-section:

Annotation file / assembled transcripts evaluation (:code:`GFF`)
=========================================================================


You have RNA-Seq reads and are running an RNA-Seq analysis pipeline. You have performed quality control, aligned the reads to the genome, and assembled the alignments into transcripts. Now, you have obtained a :code:`GFF` or :code:`GTF` file generated by a transcriptome assembler. The next question you want to address is the quality of these assembled transcripts.


A common approach in the pipeline involves using :code:`gffcompare` to compare the assembled transcripts with a reference annotation file, such as `RefSeq <https://ftp.ncbi.nlm.nih.gov/refseq/>`_, `Gencode <https://www.gencodegenes.org>`_, or `CHESS <http://ccb.jhu.edu/chess/>`_. However, this method assumes the correctness of the annotation file and evaluates how closely our assembled transcripts align with the annotations. 


It is important to acknowledge that annotation files can contain misannotations and noise. Even the most meticulously curated human annotations are not exempt from errors. Moreover, there are even more errors in other species' annotation files.

.. important::

    **We provide a new approach to evaluate transcripts by counting how many bad splice junctions are in a transcript!**


You can run Splam on **(1) annotation files** or **(2) assembled transcripts**. Splam outputs the score of every donor and acceptor site. By using these scores, 

1. You can get an overview of the quality of all introns (splice junctions) inside your annotation file.

2. You can assess each transcript by checking how many bad splice junctions a transcript has, which can be a good filtering criteria for assembled transcripts.

3. There are more potential usages to be explored!


|

.. _annotation-prepare-input:

Step 1: Preparing your input files
+++++++++++++++++++++++++++++++++++

The first step is to prepare three files for Splam analysis. In this tutorial, we will be using a toy dataset.


.. admonition:: Input files
    :class: note

    1. An annotation file in :code:`GFF` or :code:`GTF` format [`example file: refseq_110_GRCh38_chr_fixed.gff <https://github.com/Kuanhao-Chao/splam/blob/main/test/refseq_110_GRCh38_chr_fixed.gff>`_].  
    2. A reference genome in :code:`FASTA` format [`example file: chr9_subset.fa <https://github.com/Kuanhao-Chao/splam/blob/main/test/chr9_subset.fa>`_].
    3. The Splam model, which you can find it here: `splam.pt <https://github.com/Kuanhao-Chao/splam/blob/main/model/splam_script.pt>`_

|


.. _annotation-extract-introns:

Step 2: Extracting introns in your annotation file
+++++++++++++++++++++++++++++++++++++++++++++++++++++

In this step, you take :ref:`an annotation file (1) <annotation-prepare-input>` and run

.. code-block:: bash

   splam extract refseq_40_GRCh38.p14_chr_fixed.gff -o tmp_out_annotation


Splam uses :code:`gffutils` to extract introns from all transcripts. It starts by creating an sqlite3 database and then iterates through all exons in the :code:`GFF` file and writes intron coordinates into a :code:`BED` file. 

By default, the :code:`BED` is written into :code:`tmp_out/junction.bed`. The :code:`BED` file consists of six columns: :code:`CHROM`, :code:`START`, :code:`END`, :code:`JUNC_NAME`, :code:`INTRON_NUM`, and :code:`STRAND`. Here are a few entries from the :code:`BED` file:


**Output:** :code:`junction.bed`

.. code-block:: text
    :linenos:

    chr9    4849549 4860125 JUNC00000007    3       +
    chr9    5923308 5924658 JUNC00000008    6       -
    chr9    5924844 5929044 JUNC00000009    8       -


.. admonition::  Here are some **optional arguments**:
    :class: note

    .. dropdown:: :code:`-o / --outdir DIR`
        :animate: fade-in-slide-down
        :title: bg-light font-weight-bolder
        :body: bg-light text-left

        The directory where the output file is written to. The default output directory is :code:`tmp_out`. You can set your own output directory using this argument.

    .. dropdown:: :code:`-f / --file-format FILE_FORMAT`
        :animate: fade-in-slide-down
        :title: bg-light font-weight-bolder
        :body: bg-light text-left

        Splam automatically detects whether your input file is a BAM or GFF file based on its extension. In this section, we are using Splam to evaluate a given annotation file, so please ensure that your input file has a :code:`.gff`, :code:`.gtf`, :code:`.GFF`, or :code:`.GTF` extension.


    .. dropdown:: :code:`-d / --database DATABASE`
        :animate: fade-in-slide-down
        :title: bg-light font-weight-bolder
        :body: bg-light text-left

        The path to the annotation database built using :code:`gffutils`. If this argument is provided, Splam loads the database instead of creating a new one.

|

.. _annotation-score-introns:

Step 3: Scoring extracted introns
+++++++++++++++++++++++++++++++++++


In this step, the goal is to score all the extracted splice junctions. To accomplish this, you will need 3 essential files. (1) The BED file that was generated in :ref:`Step 2 <annotation-extract-introns>`, (2) :ref:`the reference genome (2) <annotation-prepare-input>` which shares coordinates with the junction BED file, and (3) :ref:`the Splam model (3) <annotation-prepare-input>`. Once you have these files in place, you can run the following command:

.. code-block:: bash

   splam score -G chr9_subset.fa -m ../model/splam_script.pt -o tmp_out_annotation tmp_out_annotation/junction.bed


In this step, a new :code:`BED` file is produced, featuring eight columns. Two extra columns, namely :code:`DONOR_SCORE` and :code:`ACCEPTOR_SCORE`, are appended to the file. It is worth noting that any unstranded introns are excluded from the output. (P.S. They might be from unstranded transcripts assembled by StringTie).

**Output:** :code:`junction_score.bed`

.. code-block:: text
    :linenos:
   
    chr9    4849549 4860125 JUNC00000007    3       +       0.7723698       0.5370769
    chr9    5923308 5924658 JUNC00000008    6       -       0.9999831       0.9999958
    chr9    5924844 5929044 JUNC00000009    8       -       0.9999883       0.9999949

.. admonition::  Here are the **required arguments**:
    :class: important

    .. dropdown:: :code:`-G / --reference-genome REF.fasta`
        :animate: fade-in-slide-down
        :title: bg-light font-weight-bolder
        :body: bg-light text-left

        The path to the reference genome in FASTA format. Please ensure that this file shares the same coordinates as your input alignment file, which is where you align your RNA-Seq reads. Splam will handle the indexing process for you if the reference genome has not been indexed yet.

    .. dropdown:: :code:`-m / --model MODEL.pt`
        :animate: fade-in-slide-down
        :title: bg-light font-weight-bolder
        :body: bg-light text-left

        This argument is the path to the trained Splam model. If you haven't downloaded the Splam model yet, here is the :ref:`link <alignment-prepare-input>`.


.. admonition::  Here are some **optional arguments**:
    :class: note

    .. dropdown:: :code:`-A / --assembly-report REPORT`
        :animate: fade-in-slide-down
        :title: bg-light font-weight-bolder
        :body: bg-light text-left

        The path to an assembly report file in :code:`tsv` format which contains the chromosome identifiers and lengths. This information is built into Splam if running on a human genome (defaults to human GRCh38, patch 14). However, **this argument is required if running on non-human species**. See :ref:`our mouse example <example-of-running-splam-on-mouse>` for reference. 

    .. dropdown:: :code:`-d / --device pytorch_DEV`
        :animate: fade-in-slide-down
        :title: bg-light font-weight-bolder
        :body: bg-light text-left

        By default, Splam automatically detects your environment and runs in :code:`cuda` mode if CUDA is available. However, if your computer is running macOS, Splam will check if :code:`mps` mode is available. If neither :code:`cuda` nor :code:`mps` are available, Splam will run in :code:`cpu` mode. You can explicitly specify the mode using the :code:`-d / --device` argument.

    .. dropdown:: :code:`-b / --batch-size BATCH`
        :animate: fade-in-slide-down
        :title: bg-light font-weight-bolder
        :body: bg-light text-left

        Additionally, you can adjust the batch size using the :code:`-b / --batch-size` argument. This argument defines the number of samples that will be propagated through the Splam network. By default, the batch size is set to 10. We recommend setting a small batch size (for instance 2) when running Splam in :code:`cpu` mode.

    .. dropdown:: :code:`-o / --outdir DIR`
        :animate: fade-in-slide-down
        :title: bg-light font-weight-bolder
        :body: bg-light text-left

        The directory where the output file is written to. The default output directory is :code:`tmp_out`. This argument is same as the one in :ref:`Step 2 <annotation-extract-introns>`. Note that if you set your own output directory, you have to set the same output directory for this step as well. Otherwise, Splam will not be able to find some essential temporary files. We recommend users not to set this argument and use the default value.

|

.. _annotation-evaluate-isoforms:

Step 4: Evaluating isoforms by Splam scores
++++++++++++++++++++++++++++++++++++++++++++++++++++++

To summarize the quality of each isoform, users can run Splam to count how many spurious splice junctions are in each transcript. 

.. code-block:: bash

   splam clean -o tmp_out_annotation -t 0.8


**Output:** :code:`cleaned.gff`

The output file of this step is a sorted Splam-cleaned GFF file. You can replace the original GFF file with the cleaned GFF file. Also, reference the :code:`report.tsv` for a list of transcripts, and their ratio and number of spurious/removed junctions.

.. admonition:: Splam score threshold suggestion
    :class: important

    For evaluating the accuracy of GFF annotation files, we advise using a stricter **score threshold of 0.8**. 


.. admonition::  Here are some **optional arguments**:
    :class: note

    .. dropdown:: :code:`-t / --threshold threshold`
        :animate: fade-in-slide-down
        :title: bg-light font-weight-bolder
        :body: bg-light text-left

        This is the score cutoff threshold for Splam to determine whether a given splice junction is spurious (discarded) or not. It is a floating-point value between 0 and 1. If the score of either the donor or acceptor site falls below this value, then any spliced alignments containing this junction will be removed. The default threshold is set to 0.1.

    .. dropdown:: :code:`-o / --outdir DIR`
        :animate: fade-in-slide-down
        :title: bg-light font-weight-bolder
        :body: bg-light text-left

        The directory where the output file is written to. The default output directory is :code:`tmp_out`. This argument is same as the one in :ref:`Step 2 <alignment-extract-introns>` and :ref:`Step 3 <alignment-score-extracted-introns>`. Note that if you set your own output directory, you have to set the same output directory for this step as well, or otherwise, Splam will not be able to find some essential temporary files. We recommend users not to set this argument and use the default value.

|

.. _annotation-whats-next:

What's next?
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

Congratulations! You have finished this tutorial.

.. seealso::
    
    * :ref:`behind-the-scenes-splam` to understand how Splam is designed and trained
    * :ref:`Q&A` to check out some common questions


|
|
|
|
|


.. image:: ../_images/jhu-logo-dark.png
   :alt: My Logo
   :class: logo, header-image only-light
   :align: center

.. image:: ../_images/jhu-logo-white.png
   :alt: My Logo
   :class: logo, header-image only-dark
   :align: center